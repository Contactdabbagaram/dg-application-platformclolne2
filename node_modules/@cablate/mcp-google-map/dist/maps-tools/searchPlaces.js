import { GoogleMapsTools } from "./toolclass.js";
export class PlacesSearcher {
    constructor() {
        this.mapsTools = new GoogleMapsTools();
    }
    async searchNearby(params) {
        try {
            const location = await this.mapsTools.getLocation(params.center);
            console.error(location);
            const places = await this.mapsTools.searchNearbyPlaces({
                location,
                keyword: params.keyword,
                radius: params.radius,
                openNow: params.openNow,
                minRating: params.minRating,
            });
            return {
                location: location,
                success: true,
                data: places.map((place) => ({
                    name: place.name,
                    place_id: place.place_id,
                    address: place.formatted_address,
                    location: place.geometry.location,
                    rating: place.rating,
                    total_ratings: place.user_ratings_total,
                    open_now: place.opening_hours?.open_now,
                })),
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "搜尋時發生錯誤",
            };
        }
    }
    async getPlaceDetails(placeId) {
        try {
            const details = await this.mapsTools.getPlaceDetails(placeId);
            return {
                success: true,
                data: {
                    name: details.name,
                    address: details.formatted_address,
                    location: details.geometry?.location,
                    rating: details.rating,
                    total_ratings: details.user_ratings_total,
                    open_now: details.opening_hours?.open_now,
                    phone: details.formatted_phone_number,
                    website: details.website,
                    price_level: details.price_level,
                    reviews: details.reviews?.map((review) => ({
                        rating: review.rating,
                        text: review.text,
                        time: review.time,
                        author_name: review.author_name,
                    })),
                },
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "獲取詳細資訊時發生錯誤",
            };
        }
    }
    async geocode(address) {
        try {
            const result = await this.mapsTools.geocode(address);
            return {
                success: true,
                data: result,
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "地址轉換座標時發生錯誤",
            };
        }
    }
    async reverseGeocode(latitude, longitude) {
        try {
            const result = await this.mapsTools.reverseGeocode(latitude, longitude);
            return {
                success: true,
                data: result,
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "座標轉換地址時發生錯誤",
            };
        }
    }
    async calculateDistanceMatrix(origins, destinations, mode = "driving") {
        try {
            const result = await this.mapsTools.calculateDistanceMatrix(origins, destinations, mode);
            return {
                success: true,
                data: result,
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "計算距離矩陣時發生錯誤",
            };
        }
    }
    async getDirections(origin, destination, mode = "driving") {
        try {
            const result = await this.mapsTools.getDirections(origin, destination, mode);
            return {
                success: true,
                data: result,
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "獲取路線指引時發生錯誤",
            };
        }
    }
    async getElevation(locations) {
        try {
            const result = await this.mapsTools.getElevation(locations);
            return {
                success: true,
                data: result,
            };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : "獲取海拔數據時發生錯誤",
            };
        }
    }
}
